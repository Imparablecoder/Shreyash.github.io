from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import padding
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes

# Generate a random salt for key derivation
salt = b'\xd6\xaf\xe1\x14U\xa5\xbaS\x12\xc3P@\x8e\x92\x99'

def generate_key(password):
    # Derive a key from the password and salt
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100000,
    )
    key = kdf.derive(password)
    return key

def encrypt(plaintext, password):
    # Generate a key from the password
    key = generate_key(password)

    # Generate a random initialization vector (IV)
    iv = b'\x1f\xee\x03P\x81\x1d\x92h\xa8\x1d\xee\xb7\xdd\x85\xd2'

    # Pad the plaintext
    padder = padding.PKCS7(128).padder()
    padded_plaintext = padder.update(plaintext) + padder.finalize()

    # Create the cipher object
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv))

    # Encrypt the padded plaintext
    encryptor = cipher.encryptor()
    ciphertext = encryptor.update(padded_plaintext) + encryptor.finalize()

    return ciphertext

def decrypt(ciphertext, password):
    # Generate a key from the password
    key = generate_key(password)

    # Generate the initialization vector (IV)
    iv = b'\x1f\xee\x03P\x81\x1d\x92h\xa8\x1d\xee\xb7\xdd\x85\xd2'

    # Create the cipher object
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv))

    # Decrypt the ciphertext
    decryptor = cipher.decryptor()
    padded_plaintext = decryptor.update(ciphertext) + decryptor.finalize()

    # Unpad the plaintext
    unpadder = padding.PKCS7(128).unpadder()
    plaintext = unpadder.update(padded_plaintext) + unpadder.finalize()

    return plaintext

# Example usage
password = b'mysecretpassword'
plaintext = b'This is a secret message.'

# Encrypt the plaintext
encrypted_data = encrypt(plaintext, password)
print('Encrypted:', encrypted_data)

# Decrypt the ciphertext
decrypted_data = decrypt(encrypted_data, password)
print('Decrypted:', decrypted_data)
